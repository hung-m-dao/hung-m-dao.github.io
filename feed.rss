<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>My blog</title><description>Hello! I'm Hung, and this is my personal space.</description><link>https://hung-m-dao.github.io/</link><language>en</language><lastBuildDate>Fri, 25 Mar 2022 02:30:38 +0000</lastBuildDate><pubDate>Fri, 25 Mar 2022 02:30:38 +0000</pubDate><ttl>250</ttl><atom:link href="https://hung-m-dao.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://hung-m-dao.github.io/hung/collectors-fallacy</guid><title>Collector's fallacy</title><description>The reason why I bought 100+ games on Steam but only play ~5 of them.</description><link>https://hung-m-dao.github.io/hung/collectors-fallacy</link><pubDate>Fri, 25 Mar 2022 00:15:00 +0000</pubDate><content:encoded><![CDATA[<h1>Collector's fallacy</h1><h2>What is it ?</h2><p><strong>Collector’s Fallacy</strong><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> is the urge to collect something that you never use or need, but the act of collecting gives you a good feeling.
The sciene behind this, is,  each time we discover a new productivity toy, our brain sends us a jolt of <a href="https://en.wikipedia.org/wiki/Dopamine">dopamine</a> (our brain’s “reward” hormone)</p><h2>How to avoid it</h2><ul>
<li>&quot;Own&quot; before you collect</li>
</ul><p>Think it through before making any decision, take it slow.</p><ul>
<li>Purging</li>
</ul><p>Get rid of things you don't really touch. My rule of thumb: If you haven't used it in a year, throw it away.</p><ul>
<li>Measuring</li>
</ul><p>Always keep track of what you already have, remind yourself of the old items, this might help reduce the need of collecting new stuffs.</p><hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><em><a href="https://observer.com/2017/05/the-collectors-fallacy-why-we-gather-things-we-dont-need/">The Collector’s Fallacy: Why We Gather Things We Don’t Need</a></em> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content:encoded></item><item><guid isPermaLink="true">https://hung-m-dao.github.io/thao/cap</guid><title>CAP Theorem</title><description>Khi thiết kế hệ thống phân tán (distributed system) có một định lý nền tảng quan trọng đó là CAP theorem. Trong bài viết này chúng ta cùng tìm hiểu về các khía cạnh này của định lý này.</description><link>https://hung-m-dao.github.io/thao/cap</link><pubDate>Wed, 23 Mar 2022 16:55:00 +0000</pubDate><content:encoded><![CDATA[<h1>CAP Theorem</h1><p>Khi nhắc tới các hệ thống phân tán (distributed system) có một định lý nền tảng quan trọng đó là “CAP theorem"</p><h2>1 WHAT - CAP theorem là gì ?</h2><p>Định lý CAP nói rằng (ở đây xin trích dẫn nguyên văn tiếng Anh)</p><blockquote>
It is impossible for a web service to provide the following three guarantees:<br>
- Consistency <br>
- Availability <br>
- Partition-tolerance <br>
</blockquote><p>Những thuộc tính trên: consistency, availability, partition-tolerance là những yếu tố mà khi xây dựng một hệ thống phần mềm thực tế đều hướng đến. Vậy trước tiên ta cần hiểu rõ các khái niệm này.</p><h3>1.1 Consistency</h3><p>Consistency ở đây nói đến việc khi một request được gửi tới một hệ tống phân tán thì nó phải được phản hồi ngay lập tức bởi một giá trị nào đó. Và quan trọng hơn là kết quả khi thực một request để đọc dữ liệu ngay sau khi kết thúc việc ghi dữ liệu phải đảm bảo việc lấy ra dữ liệu vừa được ghi thay vì các dữ liệu trước đó (stale data). Hay hiểu đơn giản trong một hệ thống database gồm n nodes, thì sau khi hoàn tất việc ghi dữ liệu ở bất kỳ node nào, thì việc đọc dữ liệu ở tất cả các node đều cho ra một kết quả giống nhau và là chính là dữ liệu được ghi thành công sau cùng.</p><h3>1.2 Availability</h3><p>Tính khả dụng định nghĩa rằng với bất kỳ request nào được nhận bởi một node đang hoạt động trong hệ thống phải trả về một response tương ứng, điều đó có nghĩa tất cả mọi giải thuật và process bên trọng đều phải kết thúc vào một thời điểm nào đó (eventually terminate) cho dù gặp phải vấn đề gì.</p><h3>1.3 Partition-tolerance</h3><p>Thuộc tính này là điều kiện đảm bảo cho hai đăc tính trên trong hệ thống phân tán. Partition-tolerance nói rằng khi có một phần hệ thống bị sập thì hệ thống vẫn có thể trả về kết quả cho một request tương ứng. Điều cho phép việc các message được truyền tải giữa các phần (các nodes) có thể bị mất (lost) hoặc bị trì hoàn (delayed)</p><h3>Read more</h3><ul><li><a href="https://awoc.wolski.fi/dlib/big-data/GiLy02-CAP.pdf">Brewer’s Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://hung-m-dao.github.io/hung/dunning-kruger</guid><title>Dunning-Kruger effect</title><description>"You're not as smart as you think you are"</description><link>https://hung-m-dao.github.io/hung/dunning-kruger</link><pubDate>Wed, 23 Mar 2022 10:55:00 +0000</pubDate><content:encoded><![CDATA[<h1>Dunning-Kruger effect</h1><p>The <strong>Dunning-Kruger effect</strong> is a type of cognitive bias in which people believe that they are smarter and more capable than they really are. Essentially, low ability people do not possess the skills needed to recognize their own incompetence.</p><img src="https://hung-m-dao.github.io//images/dunning-kruger.jpeg" alt="Dunning-Kruger chart"/>]]></content:encoded></item></channel></rss>